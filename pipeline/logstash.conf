input {
    #http経由でデータをinputする場合使用する
    #バインドするportを指定、Content-Typeにjsonを使用する場合はcodecにjsonを指定
    http {
        port => 1890
        codec => "json"
    }
}

filter {
    #jsonデータを解析してフィールドに展開する
    #inputしたjsonデータがそのままでは扱えない場合使用する
    #json {
    #    source => "message"
    #    remove_field => ["message"]
    #}

    #rubyを使用し、@timestampに格納されている日時データをUSTからJSTに、フォーマットをYYYY-mm-dd HH:MM:SSの形に変更
    ruby {
        code  =>  "event.set('iot_timestamp', event.get('[@timestamp]').time.localtime('+09:00').strftime('%Y-%m-%d %H:%M:%S'));"
    }

    #フィールドの加工(名前変更、置換、分割等)を行う、add_fieldは共通オプションのため、mutate以外でも使用可
    mutate {
        add_field => {
            "namespace" => "%{[payload][0][namespace]}"
            "latitude" => "%{[payload][0][meta][latitude]}"
            "accuracy" => "%{[payload][0][meta][accuracy]}"
            "longitude" => "%{[payload][0][meta][longitude]}"
            "altitude" => "%{[payload][0][meta][altitude]}"
            "temp_value" => "%{[payload][0][value]}"
            "batt_value" => "%{[payload][1][value]}"
        }
    }

    #add_fieldは処理時データを文字列として追加するため、文字列以外の型を使用したい場合追加後のフィールドを型変換する
    #mutateプラグインには処理順があり、add_fieldはconvertよりも処理順が遅いため、処理後のデータを変換するには別枠でmutateを記述する
    mutate {
        convert => {
            "temp_value" => "float"
            "batt_value" => "float"
        }
    }
}

output {
    #デバッグ用、ログに処理データを表示
    #stdout {
    #    codec => rubydebug
    #}

    #jdbcドライバを使用し、DBへのデータ登録を行う
    #ドライバをコンテナ内へ配置が必要
    jdbc {
        driver_jar_path => "/usr/share/logstash/vendor/jar/jdbc/postgresql-42.1.4.jre7.jar"
        driver_class => "org.postgresql.Driver"
        #変数はdeploymentのマニュフェストファイルで指定
        connection_string => 'jdbc:postgresql://${POSTGRE_HOST}:${POSTGRE_PORT}/${POSTGRE_DB}'
        username => '${POSTGRE_USER}'
        password => '${POSTGRE_PWD}'
        #statementにクエリを記述、?(プレースホルダー)を使用し、データをバインドする
        #使用したプレースホルダーの数だけバインドするフィールドをクエリの後ろに記述する
        statement => [ 
            "INSERT INTO ${ANOMALY_TABLE_DATA}
                (servicecode, id, simid, namespace, temp_value, batt_value, altitude, latitude, accuracy, longitude, iot_timestamp)
            VALUES (
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                ?,
                CAST(? AS timestamp)
            )",
            "serviceCode",
            "id",
            "simId",
            "namespace",
            "temp_value",
            "batt_value",
            "altitude",
            "latitude",
            "accuracy",
            "longitude",
            "iot_timestamp"
        ]
    }
}
